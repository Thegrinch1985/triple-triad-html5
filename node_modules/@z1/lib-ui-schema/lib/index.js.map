{"version":3,"file":"index.js","sources":["../src/common.js","../src/form.js","../src/nav.js","../src/view.js","../src/types.js"],"sourcesContent":["import { task } from '@z1/preset-task'\r\n\r\n// exports\r\nexport const tailHead = task(t =>\r\n  t.compose(\r\n    t.head,\r\n    t.tail\r\n  )\r\n)\r\nexport const camelKeys = task(t =>\r\n  t.compose(\r\n    t.map(item => t.caseTo.camelCase(item)),\r\n    t.keys\r\n  )\r\n)\r\n","import { task } from '@z1/preset-task'\r\nimport { camelKeys, tailHead } from './common'\r\n\r\n// form types\r\nconst SCALAR = {\r\n  ARRAY: 'array',\r\n  NUMBER: 'number',\r\n  INT: 'integer',\r\n  OBJECT: 'object',\r\n  STRING: 'string',\r\n  BOOL: 'boolean',\r\n  NULL: 'null',\r\n}\r\nexport const FORM_SCHEMA = task(t =>\r\n  t.mergeDeepRight(SCALAR, {\r\n    KEY: {\r\n      TITLE: 'title',\r\n      DESC: 'description',\r\n      TYPE: 'type',\r\n      FORMAT: 'format',\r\n      REQUIRED: 'required',\r\n      PROPS: 'properties',\r\n      ITEMS: 'items',\r\n      ENUM: 'enum',\r\n      ENUM_NAMES: 'enumNames',\r\n      UNIQUE: 'uniqueNames',\r\n      UNIQUE_ITEMS: 'uniqueItems',\r\n      DEFAULT: 'default',\r\n    },\r\n    UI: {\r\n      WIDGET: 'ui:widget',\r\n      FIELD: 'ui:field',\r\n      ORDER: 'ui:order',\r\n      PLACEHOLDER: 'ui:placeholder',\r\n      DISABLED: 'ui:disabled',\r\n      CSS: 'classNames',\r\n      ROOT_FIELD_ID: 'rootFieldId',\r\n      OPTIONS: 'ui:options',\r\n    },\r\n    FORMAT: {\r\n      EMAIL: 'email',\r\n      URL: 'uri',\r\n      DATA_URL: 'data-url',\r\n      DATE: 'date',\r\n      DATE_TIME: 'date-time',\r\n      ALT_DATE: 'alt-date',\r\n      ALT_DATE_TIME: 'alt-datetime',\r\n    },\r\n    WIDGET: {\r\n      RADIO: 'radio',\r\n      CHECKBOXES: 'checkboxes',\r\n      SELECT: 'select',\r\n      TEXT_AREA: 'textarea',\r\n      PASSWORD: 'password',\r\n      COLOR: 'color',\r\n      EMAIL: 'email',\r\n      URL: 'uri',\r\n      FILE: 'data-url',\r\n      DATE: 'date',\r\n      DATE_TIME: 'date-time',\r\n      ALT_DATE: 'alt-date',\r\n      ALT_DATE_TIME: 'alt-datetime',\r\n      UP_DOWN: 'updown',\r\n      RANGE: 'range',\r\n      DISABLED: 'disabled',\r\n      READ_ONLY: 'readonly',\r\n      HIDDEN: 'hidden',\r\n      HELP: 'help',\r\n      NUMBER: 'number',\r\n    },\r\n  })\r\n)\r\n\r\n// form tasks\r\nconst jsonSchemaFromFieldList = task(t =>\r\n  t.compose(\r\n    t.fromPairs,\r\n    t.map(item => [t.path(['name'], item), t.path(['schema'], item)])\r\n  )\r\n)\r\nconst uiSchemaFromUiList = task(t => (itemOrItems, collection = {}) => {\r\n  if (t.equals(t.type(itemOrItems), 'Array')) {\r\n    if (t.equals(t.length(itemOrItems), 0)) {\r\n      return collection\r\n    }\r\n    const itemHead = t.head(itemOrItems)\r\n    if (t.equals(t.length(itemOrItems), 1)) {\r\n      return t.merge(collection, itemHead)\r\n    }\r\n    return uiSchemaFromUiList(\r\n      t.tail(itemOrItems),\r\n      t.merge(collection, itemHead)\r\n    )\r\n  }\r\n  if (t.equals(t.type(itemOrItems), 'Object')) {\r\n    return t.merge(collection, itemOrItems)\r\n  }\r\n  return collection\r\n})\r\nconst uiSchemaFromFieldList = task(t => list => {\r\n  const uiList = t.filter(item => t.has('uiSchema')(item), list)\r\n  const uiSchemaList = t.map(item => {\r\n    const ui = t.path(['uiSchema'], item)\r\n    return t.gt(t.length(t.keys(ui)), 1)\r\n      ? t.fromPairs(t.map(key => [key, t.path([key], ui)], t.keys(ui)))\r\n      : ui\r\n  }, uiList)\r\n  return uiSchemaFromUiList(uiSchemaList)\r\n})\r\nconst requiredFromSchema = task(t => schema =>\r\n  t.compose(\r\n    t.map(item => item.key),\r\n    t.filter(item => item.required),\r\n    t.map(([key, value]) => {\r\n      return {\r\n        key,\r\n        required: !t.has('required')(value)\r\n          ? false\r\n          : t.eq('Array', t.type(value.required))\r\n          ? false\r\n          : value.required,\r\n      }\r\n    })\r\n  )(t.toPairs(schema || {}) || [])\r\n)\r\nconst correctSchemaFields = task(t => schema =>\r\n  t.compose(\r\n    t.fromPairs,\r\n    t.map(([key, value]) =>\r\n      !t.has('required')(value)\r\n        ? [key, value]\r\n        : [key, t.omit(['required'], value)]\r\n    )\r\n  )(t.toPairs(schema || {}) || [])\r\n)\r\nconst jsonField = task(t => (name, field, children) => {\r\n  const fieldKeys = camelKeys(FORM_SCHEMA.KEY)\r\n  const fieldList = t.toPairs(field)\r\n  const fieldSchema = t.fromPairs(\r\n    t.filter(\r\n      field =>\r\n        t.gt(t.findIndex(key => t.equals(t.head(field), key), fieldKeys), -1),\r\n      fieldList\r\n    )\r\n  )\r\n  const uiSchemaList = t.head(\r\n    t.filter(field => t.equals(t.head(field), 'ui'), fieldList)\r\n  )\r\n  const uiSchema = t.gt(t.length(uiSchemaList), 0)\r\n    ? t.fromPairs(\r\n        t.filter(\r\n          field =>\r\n            !t.equals(t.head(field), 'undefined') && !t.isNil(t.head(field)),\r\n          t.map(\r\n            field => [t.head(field), tailHead(field)],\r\n            t.toPairs(tailHead(uiSchemaList))\r\n          )\r\n        )\r\n      )\r\n    : {}\r\n  // fields can only be string, object and array\r\n  // objects and arrays must have children\r\n  // only objects have the required field\r\n  const nextFieldType = !t.isEmpty(t.path([FORM_SCHEMA.KEY.TYPE], fieldSchema))\r\n    ? t.path([FORM_SCHEMA.KEY.TYPE], fieldSchema)\r\n    : !t.isEmpty(children) && !t.isNil(children)\r\n    ? t.equals(t.length(children), 1)\r\n      ? FORM_SCHEMA.ARRAY\r\n      : FORM_SCHEMA.OBJECT\r\n    : FORM_SCHEMA.STRING\r\n  // objects have props and arrays have items\r\n  const childKey =\r\n    !t.isEmpty(children) && !t.isNil(children)\r\n      ? t.equals(nextFieldType, FORM_SCHEMA.OBJECT)\r\n        ? FORM_SCHEMA.KEY.PROPS\r\n        : FORM_SCHEMA.KEY.ITEMS\r\n      : ''\r\n  const nextChildren = t.isEmpty(childKey)\r\n    ? {}\r\n    : jsonSchemaFromFieldList(children)\r\n  // modify object field schema to include required fields\r\n  const nextFieldSchema = t.equals(FORM_SCHEMA.OBJECT, nextFieldType)\r\n    ? t.merge(fieldSchema, { required: requiredFromSchema(nextChildren) })\r\n    : fieldSchema\r\n  // schema mutation\r\n  const nextSchema = t.isEmpty(childKey)\r\n    ? t.merge(nextFieldSchema, { type: nextFieldType })\r\n    : t.merge(nextFieldSchema, {\r\n        type: nextFieldType,\r\n        [childKey]: correctSchemaFields(nextChildren),\r\n      })\r\n  // ui schema mutation\r\n  const nextUiSchema =\r\n    !t.isEmpty(uiSchema) && !t.isNil(uiSchema)\r\n      ? t.gt(t.length(children), 0)\r\n        ? t.merge(\r\n            {\r\n              [name]: uiSchema,\r\n            },\r\n            uiSchemaFromFieldList(children)\r\n          )\r\n        : { [name]: uiSchema }\r\n      : t.gt(t.length(children), 0)\r\n      ? uiSchemaFromFieldList(children)\r\n      : {}\r\n  // yield\r\n  return {\r\n    name,\r\n    schema: nextSchema,\r\n    uiSchema: nextUiSchema,\r\n  }\r\n})\r\n\r\n// exports\r\nexport const formSchema = task(t => factory => {\r\n  const fieldListOrRootField = factory(jsonField, FORM_SCHEMA)\r\n  const fieldList = t.equals(t.type(fieldListOrRootField), 'Array')\r\n    ? fieldListOrRootField\r\n    : [fieldListOrRootField]\r\n  const schema = jsonSchemaFromFieldList(fieldList)\r\n  const schemaKeys = t.keys(schema)\r\n  const nextSchema = t.equals(t.length(schemaKeys), 1)\r\n    ? t.path(schemaKeys, schema)\r\n    : schema\r\n  const uiSchema = uiSchemaFromFieldList(fieldList)\r\n  return {\r\n    schema: nextSchema,\r\n    uiSchema,\r\n  }\r\n})\r\n","import { task } from '@z1/preset-task'\r\nimport { camelKeys, tailHead } from './common'\r\n\r\n// nav types\r\nconst NAV_SCHEMA = {\r\n  PARENT: 'parent',\r\n  ORIGIN: 'origin',\r\n  ROOT: 'root',\r\n  CHILDREN: 'children',\r\n}\r\n\r\n// nav tasks\r\nconst cleanRoutePath = task(t => routePath =>\r\n  t.equals(t.last(routePath), '/') ? t.dropLast(1, routePath) : routePath\r\n)\r\nconst cleanSuffix = task(t => suffix =>\r\n  suffix\r\n    ? t.equals(t.head(suffix), '/')\r\n      ? cleanRoutePath(suffix)\r\n      : `/${cleanRoutePath(suffix)}`\r\n    : ''\r\n)\r\nconst toUrl = task(t => (routePath, suffix) =>\r\n  t.equals(t.head(routePath), '/')\r\n    ? `${cleanRoutePath(routePath)}${cleanSuffix(suffix)}`\r\n    : `/${cleanRoutePath(routePath)}${cleanSuffix(suffix)}`\r\n)\r\nconst hasChildren = task(t => t.has(NAV_SCHEMA.CHILDREN))\r\nconst navItem = task(\r\n  t => (path, props, children) => (parentPath, originPath) => {\r\n    const nextOriginPath = originPath || NAV_SCHEMA.ROOT\r\n    const nextParentPath = parentPath || NAV_SCHEMA.ROOT\r\n    // mutable item\r\n    let item = {\r\n      originPath: nextOriginPath,\r\n      parentPath: nextParentPath,\r\n      path: undefined,\r\n    }\r\n    // path\r\n    if (t.type(path) === 'Array') {\r\n      let nextPath = ''\r\n      t.forEach(element => {\r\n        nextPath = `${nextPath}/${element}`\r\n      }, path)\r\n      item = t.merge(item, { path: nextPath })\r\n    } else {\r\n      item = t.merge(item, {\r\n        path: path !== '' ? toUrl(path) : originPath,\r\n      })\r\n    }\r\n    // children\r\n    if (children && t.gt(t.length(children), 0)) {\r\n      const nextChildren = t.map(\r\n        child => child(item.path, parentPath),\r\n        children\r\n      )\r\n      item = t.merge(item, { children: nextChildren })\r\n    }\r\n    // yield mutable item with props\r\n    return t.merge(item, props || {})\r\n  }\r\n)\r\n\r\n// exports schema\r\nexport const navSchema = task(t => factory =>\r\n  t.map(\r\n    item => item(NAV_SCHEMA.ROOT, NAV_SCHEMA.ROOT),\r\n    factory(navItem, NAV_SCHEMA)\r\n  )\r\n)\r\n\r\n// matching tasks\r\nconst safeChildren = item => (item && hasChildren(item) ? item.children : [])\r\nconst matchesPath = task(t => (path, item) => {\r\n  return t.not(item)\r\n    ? false\r\n    : t.eq(path, '/')\r\n    ? t.eq(item.path, path)\r\n    : item.path.includes(decodeURI(path))\r\n})\r\nconst itemByPath = task(t => (path, list) =>\r\n  t.find(item => matchesPath(path, item), list)\r\n)\r\nconst tailItems = task(t => (items, children) =>\r\n  t.concat(t.tail(items), children)\r\n)\r\nexport const matchedNavItem = task(t => (outerPath, outerList) => {\r\n  const search = (path, list) => {\r\n    // list empty\r\n    if (t.equals(t.length(list), 0)) {\r\n      return undefined\r\n    }\r\n    // list has single item\r\n    if (t.equals(t.length(list), 1)) {\r\n      // match head\r\n      const singleItem = t.head(list)\r\n      if (matchesPath(path, singleItem)) {\r\n        return singleItem\r\n      }\r\n      // recurse breadth first\r\n      return search(path, safeChildren(singleItem))\r\n    }\r\n    // match item in list\r\n    const item = itemByPath(path, list)\r\n    if (item) {\r\n      return item\r\n    }\r\n    // recurse breadth first\r\n    return search(\r\n      path,\r\n      tailItems(\r\n        list,\r\n        t.compose(\r\n          safeChildren,\r\n          t.head\r\n        )(list)\r\n      )\r\n    )\r\n  }\r\n  return search(outerPath, outerList)\r\n})\r\n","import { task } from '@z1/preset-task'\r\n\r\n// view types\r\nconst VIEW_SCHEMA = {\r\n  NODE: '@node',\r\n  ui: key => `@${key}`,\r\n  event: key => `#${key}`,\r\n}\r\n\r\n// view tasks\r\nconst viewProps = task(t => props => {\r\n  // tokens:\r\n  //  @key = ui component\r\n  //  #key = handler\r\n  //  %key = variable: prop type\r\n  // reserved props:\r\n  //  @node = node to be rendered\r\n  // pair props:\r\n  const propsPairs = t.toPairs(props)\r\n  // node: find @node or default to Box.div\r\n  const node = t.find(prop => t.equals(t.head(prop), '@node'), propsPairs)\r\n  // ui -> filter ui components:\r\n  const uiList = t.filter(\r\n    prop =>\r\n      !t.equals(t.head(prop), '@node') && t.equals(t.head(t.head(prop)), '@'),\r\n    propsPairs\r\n  )\r\n  // handlers -> filter handlers:\r\n  const handlerList = t.filter(\r\n    prop => t.equals(t.head(t.head(prop)), '#'),\r\n    propsPairs\r\n  )\r\n  // props -> omit node, ui and handler keys from props:\r\n  const omitList = t.map(prop => t.head(prop), t.concat(uiList, handlerList))\r\n  const nextProps = t.omit(t.concat(['@node'], omitList), props)\r\n  // omit tokens in keys:\r\n  const omitToken = prop => [`${t.tail(t.head(prop))}`, t.head(t.tail(prop))]\r\n  // yield:\r\n  return {\r\n    node: node ? t.head(t.tail(node)) : 'Box',\r\n    props: nextProps,\r\n    ui: t.fromPairs(t.map(omitToken, uiList)),\r\n    handlers: t.fromPairs(t.map(omitToken, handlerList)),\r\n  }\r\n})\r\nconst viewNode = task(t => (name = 'view', props = {}, children = []) => {\r\n  const nextProps = viewProps(props)\r\n  const nextChildren = t.equals(t.type(children), 'Array') ? children : []\r\n  const childrenMap = t.mapObjIndexed(\r\n    (value, key) => t.path([key], t.head(value)),\r\n    t.groupBy(child => t.head(t.head(t.toPairs(child))))(nextChildren)\r\n  )\r\n  return {\r\n    [name]: t.merge(nextProps, { children: childrenMap }),\r\n  }\r\n})\r\n\r\n// exports\r\nexport const viewSchema = factory =>\r\n  factory(\r\n    viewNode,\r\n    task(t =>\r\n      t.mergeDeepRight(VIEW_SCHEMA, {\r\n        CHILDREN: viewNode('Children'),\r\n      })\r\n    )\r\n  )\r\n","export const VIEW_STATUS = {\r\n  INIT: 'init',\r\n  WAITING: 'waiting',\r\n  READY: 'ready',\r\n  TRANSMITTING: 'transmitting',\r\n  COMPLETE: 'complete',\r\n}\r\n\r\nexport const CAPTURE_STATUS = {\r\n  INVALID: 'invalid',\r\n  ERROR: 'error',\r\n  SUCCESS: 'success',\r\n}\r\n"],"names":["tailHead","task","t","compose","head","tail","camelKeys","map","item","caseTo","camelCase","keys","SCALAR","ARRAY","NUMBER","INT","OBJECT","STRING","BOOL","NULL","FORM_SCHEMA","mergeDeepRight","KEY","TITLE","DESC","TYPE","FORMAT","REQUIRED","PROPS","ITEMS","ENUM","ENUM_NAMES","UNIQUE","UNIQUE_ITEMS","DEFAULT","UI","WIDGET","FIELD","ORDER","PLACEHOLDER","DISABLED","CSS","ROOT_FIELD_ID","OPTIONS","EMAIL","URL","DATA_URL","DATE","DATE_TIME","ALT_DATE","ALT_DATE_TIME","RADIO","CHECKBOXES","SELECT","TEXT_AREA","PASSWORD","COLOR","FILE","UP_DOWN","RANGE","READ_ONLY","HIDDEN","HELP","jsonSchemaFromFieldList","fromPairs","path","uiSchemaFromUiList","itemOrItems","collection","equals","type","length","const","itemHead","merge","uiSchemaFromFieldList","list","uiList","filter","has","uiSchemaList","ui","gt","key","requiredFromSchema","schema","required","ref","value","eq","toPairs","correctSchemaFields","omit","jsonField","name","field","children","fieldKeys","fieldList","fieldSchema","findIndex","uiSchema","isNil","nextFieldType","isEmpty","childKey","nextChildren","nextFieldSchema","formSchema","factory","fieldListOrRootField","schemaKeys","NAV_SCHEMA","PARENT","ORIGIN","ROOT","CHILDREN","cleanRoutePath","routePath","last","dropLast","cleanSuffix","suffix","toUrl","hasChildren","navItem","props","parentPath","originPath","undefined","let","nextPath","forEach","element","child","navSchema","safeChildren","matchesPath","not","includes","decodeURI","itemByPath","find","tailItems","items","concat","matchedNavItem","outerPath","outerList","search","singleItem","VIEW_SCHEMA","NODE","event","viewProps","propsPairs","node","prop","handlerList","omitList","nextProps","omitToken","handlers","viewNode","childrenMap","mapObjIndexed","groupBy","INIT","WAITING","READY","TRANSMITTING","COMPLETE","INVALID","ERROR","SUCCESS"],"mappings":"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"}